#!/usr/bin/env bash

# Create a new directory and enter it
function mkd() {
	mkdir -p "$@" && cd "$_";
}

# Determine size of a file or total size of a directory
function fs() {
	if du -b /dev/null > /dev/null 2>&1; then
		local arg=-sbh;
	else
		local arg=-sh;
	fi
	if [[ -n "$@" ]]; then
		du $arg -- "$@";
	else
		du $arg .[^.]* ./*;
	fi;
}


function fn() {
# from https://stackoverflow.com/a/54305758
	find . -type f | cut -d/ -f2 | sort | uniq -c
}

function sumcol() {
  awk "{ SUM += \$${1} } END { print SUM }"
}


#########################
# pandoc
#########################
function md2pdf() {
	for file in "$@"; do pandoc "$file" -o "${file%.md}.pdf"; done
}

function md2html() {
	for file in "$@"; do pandoc "$file" -o "${file%.md}.html"; done
}

#########################
# GIT
#########################
# from https://bezhermoso.github.io/2018/07/28/jump-back-up-to-git-repo-root-directory/
function jump-to-git-root {
  local _root_dir="$(git rev-parse --show-toplevel 2>/dev/null)"
  if [[ $? -gt 0 ]]; then
    >&2 echo 'Not a Git repo!'
    exit 1
  fi
  local _pwd=$(pwd)
  if [[ $_pwd = $_root_dir ]]; then
    # Handle submodules:
    # If parent dir is also managed under Git then we are in a submodule.
    # If so, cd to nearest Git parent project.
    _root_dir="$(git -C $(dirname $_pwd) rev-parse --show-toplevel 2>/dev/null)"
    if [[ $? -gt 0 ]]; then
      echo "Already at Git repo root."
      return 0
    fi
  fi
  # Make `cd -` work.
  OLDPWD=$_pwd
  echo "Git repo root: $_root_dir"
  cd $_root_dir
}

function archive_branch() {
  git tag archive/$1
  git branch -D $1
}


#########################
# docker
#########################
# from https://github.com/Bash-it/bash-it/blob/master/plugins/available/docker.plugin.bash
function docker-remove-most-recent-container() {
  docker ps -ql | xargs docker rm
}

function docker-remove-most-recent-image() {
  docker images -q | head -1 | xargs docker rmi
}

function docker-enter() {
  docker exec -it "$@" /bin/bash;
}


#########################
# misc
#########################
function mailattach() {
    
    if [ $# -gt 1 ]; then
    zip -r /tmp/attachment.zip $@
    ATTACHMENT="/tmp/attachment.zip"
    else
    ATTACHMENT=$1
    fi
    
    # send mail
    echo "message sent from the terminal using the function mailttach" | mailx -s "Subject: attachment incoming" -a $ATTACHMENT konrad.mayer@zamg.ac.at
}

# copy/paste to and from clipboard - from https://stackoverflow.com/questions/5130968/how-can-i-copy-the-output-of-a-command-directly-into-my-clipboard#41843618

function _copy(){
    cat | xclip -selection clipboard
}

function _paste(){
    xclip -selection clipboard -o
}

function up ()
{
    local old="$PWD"
    for i in $(seq "${1:-1}"); do
        cd ..
    done
    OLDPWD="$old"
}

function om () {
    code $(git ls-files -m)
}

function nh() {
    nohup $@ > nohup.out 2>&1&
    echo "PROCESS HAS PID $!" | tee nohup.out
}

function um ()
{
    less ~/wiki/um/$1
}
